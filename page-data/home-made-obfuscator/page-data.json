{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/home-made-obfuscator/","result":{"data":{"site":{"siteMetadata":{"title":"Grishy","author":"Sergey Grishin"}},"markdownRemark":{"id":"54e555fe-9ccb-5350-b3ed-0a89c5dae765","html":"<p>В этой статье я покажу как можно создать свой простой JavaScript обфускатор. Чтобы проиллюстрировать его работу, мы применим его к простому <a href=\"https://habr.com/ru/company/oleg-bunin/blog/321294/\">fingerprinting скрипту</a>. В оставшейся части это поста, мы будем предполагать, что работаем в директории со следующей структурой:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">myObfuscator<span class=\"token operator\">/</span>\n    dist<span class=\"token operator\">/</span>\n    src<span class=\"token operator\">/</span>\n    test<span class=\"token operator\">/</span></code></pre></div>\n<p>Директория <strong>src/</strong> будет содержать исходный JavaScript код, в то время как <strong>dist/</strong> директория будет содержать транспилируемые или обфусцированные версии этих файлов. Наконец, в директории <strong>test/</strong> будет лежать файлы, проверяющий что код работает после обфусцирования.</p>\n<p>В этом посте я попытаюсь привести полный рабочий пример. Тем не менее, если вы просто заинтересованы только реализацией обфускатора, можете пропустить следующий раздел.</p>\n<h2>Fingerprinting script</h2>\n<p>Для лучшего понимая применения обфускации, используем маленький скрипт для идентификации, как пример для данной статьи. Никаких знаний об этой технологии не требуется, чтобы понять оставшуюся часть поста. Тем не менее, я коротко опишу, что это за технология.\nBrowser fingerprinting это техника, которая собирает набор атрибутов, относящихся к пользовательскому устройству и браузеру. Чтобы собрать эти атрибуты, мы можем использовать HTTP заголовки, отправляемые браузером и так же JavaScript APIs. В этом посте, мы будем использовать только JavaScript API. Полученный отпечаток можно использовать как для отслеживания пользователя, там и для защиты от ботов и сканеров (crawlers). В контексте безопасности fingerprinting’a компании часто хотя обфусцировать скрипт сбора информации, чтобы атакующим было сложнее узнать собранные атрибуты. Действительно, поскольку JavaScript выполняется в браузере, его необходимо отправить на компьютер пользователя. Таким образом, злоумышленники могут посмотреть на содержание скрипта, отсюда и необходимость обфускации. Тем не менее, следует соблюдать осторожность, поскольку оно не идеально. При необходимом времени и усилия, злоумышленники могут разобрать скрипт.</p>\n<p>Мы используем простой скрипт с несколькими атрибутами, чтобы его было легче понять. В каталоге <strong>src/</strong> мы создаем файл с именем <strong>SimpleFingerprintCollector.js</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleFingerprintCollector</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tests <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fingerprint <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">registerTest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> test</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tests<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n      fn<span class=\"token operator\">:</span> test<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> testsPromises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> test <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"AsyncFunction\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        testsPromises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            testsPromises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n              test<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token parameter\">resTest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fingerprint<span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> resTest<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fingerprint<span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fingerprint<span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fingerprint<span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>testsPromises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fingerprint<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fingerprintCollector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleFingerprintCollector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Он содержит класс с тремя методами. Можно добавить отпечаток используя метод <strong>fingerprintCollector.registerTest</strong> и собрать их с помощью <strong>fingerprintCollector.collect</strong>.</p>\n<p>Затем в каталоге <strong>src/</strong> мы создаем подкаталог с именем <strong>fingerprint/</strong>. В <strong>src/fingerprint/</strong> мы разместим все наши тесты. Хотя нет необходимости отделять тесты от класса <strong>SimpleFingerprintCollector</strong>, я сделаю это в качестве примера, чтобы показать, как использовать Gulp для объединения файлов.</p>\n<p>В <strong>src/fingerprint/</strong> мы добавили canvas fingerprinting:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/fingerprint/canvas.js</span>\nfingerprintCollector<span class=\"token punctuation\">.</span><span class=\"token function\">registerTest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"inline\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span>canvasWinding <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">isPointInPath</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"evenodd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span>canvasWinding <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span>textBaseline <span class=\"token operator\">=</span> <span class=\"token string\">\"alphabetic\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"#f60\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"#069\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">\"11pt no-real-font-123\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cwm fjordbank glyphs vext quiz, 😃\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"rgba(102, 204, 0, 0.2)\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">\"18pt Arial\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cwm fjordbank glyphs vext quiz, 😃\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    context<span class=\"token punctuation\">.</span>globalCompositeOperation <span class=\"token operator\">=</span> <span class=\"token string\">\"multiply\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"rgb(255,0,255)\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"rgb(0,255,255)\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"rgb(255,255,0)\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"rgb(255,0,255)\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evenodd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Соберём информацию так же и о платформе:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/fingerprint/platform.js</span>\nfingerprintCollector<span class=\"token punctuation\">.</span><span class=\"token function\">registerTest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"platform\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> navigator<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Добавим ещё несколько метрик… полный <a href=\"https://github.com/antoinevastel/simpleJSObfuscator\">код можно найти на GitHub</a>.</p>\n<h2>Сборка не обфусцированного скрипта.</h2>\n<p>После этого используем Gulp, для сборки не обфусцированной версии скрипта. Для этого создадим файл <strong>gulpfile.js</strong> в корне проекта. На данный момент мы объявим одну задачу в gulp файле. К концу поста мы добавим ещё несколько, для вызова обфускации и минификации.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// gulpfile.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> series<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> dest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gulp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> concat <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gulp-concat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">concatScripts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"src/simpleFingerprintCollector.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/fingerprint/*.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simpleFingerprintCollector.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./dist/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>concat <span class=\"token operator\">=</span> concatScripts<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Из корня проекта вы можете собрать не обфусцированную версию скрипта выполнив <code class=\"language-text\">gulp concat</code> в терминале. Это сгенерирует <strong>simpleFingerprintCollector.js</strong> в папке <strong>dist/</strong>. В файле будут находится наш класс и несколько вариантов взятия атрибутов (canvas, платформа).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// dist/simpleFingerprintCollector.js</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleFingerprintCollector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fingerprintCollector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleFingerprintCollector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfingerprintCollector<span class=\"token punctuation\">.</span><span class=\"token function\">registerTest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'adblock'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfingerprintCollector<span class=\"token punctuation\">.</span><span class=\"token function\">registerTest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Другие тесты ...</span>\n\nfingerprintCollector<span class=\"token punctuation\">.</span><span class=\"token function\">registerTest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'screenResolution'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Обфускация скрипта</h2>\n<p>Сейчас, когда у нас есть fingerprinting скрипт, мы можем обфусцировать его. Существует несколько различных подходов, простые или более сложные и эффективные и не очень. Вы можете почитать об этом более подробно в <a href=\"https://antoinevastel.com/obfuscation/2017/12/06/presentation-obfuscation.html\">другой статье</a>(англ.), где я описал базовые техники обфускации. В данном посте, мы будем использовать простую технику обфускации, которая <abbr title=\"consists\">заключается</abbr> в замене статических строк и чисел, <abbr title=\"as well as\">а так же</abbr> к свойствам и методам объекта с помощью вызова функции, чтобы сделать его менее читаемым. Если вы хотите нечто похожее, но production-ready решение, вы можете использовать <a href=\"https://obfuscator.io/\">obfuscator.io</a> или связанный с ним npm пакет. Техника, представленная в этом после довольно похожа на <strong>String Array</strong> опцию в их обфускаторе.</p>\n<p><abbr title=\"The way\">То</abbr>, как я реализую обфускато, явно не оптимально. Более того, я <abbr title=\"not consistent\">не использую один стиль</abbr> по всему коду. Идея состоит в том, чтобы показать различные пути манипулирования кодом и <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">AST</a>. Я использую библиотеку <a href=\"https://shift-ast.org/\">shift</a>, но можно использовать и другие. Например <a href=\"https://esprima.org/\">Esprima</a>.</p>\n<p>Мы создадим <strong>src/obfuscator.js</strong> файл, который будет содержать код нашей программы обфускации. В этом файле, мы добавим несколько преобразователей кода, которые сделают его менее читаемым. Например, мы хотим преобразовать присваивания свойств объекта, чтобы сделать их менее читаемыми. Мы так же можем заменить статические строки и чиста вызовами функций.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">context<span class=\"token punctuation\">.</span>textBaseline <span class=\"token operator\">=</span> <span class=\"token string\">\"alphabetic\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// станет</span>\ncontext<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexOther<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Мы так же хотим изменить статический доступ к полям объекта (методам и атрибутам), чтобы сделать их динамическими, используя вызовы функций:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">errorMessage <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// станет</span>\nerrorMessage <span class=\"token operator\">=</span> e<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Чтобы сделать это, в начале нужно импортировать библиотеки, которые мы будем использовать.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> RefactorSession <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shift-refactor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> parseScript <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shift-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Shift <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shift-ast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Для обфускации скрипта будем манипулировать с его AST (Абстрактное Синтаксическое Дерево), древовидным представлением кода. Если вы хотите посмотреть как оно выглядит в UI, можно использовать <a href=\"https://astexplorer.net/\">AST Explorer</a>.</p>\n<p>Затем мы создаем функцию <code class=\"language-text\">obfuscateFPScript</code>, которая принимает в качестве входных аргументов путь к файлу для обфускации и путь для сохранения результата преобразования. В этой функции мы начинаем собирать различные строки, числа и свойства объекта для обфускации.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">obfuscateFPScript</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src<span class=\"token punctuation\">,</span> dest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Читаем содержимое переданного файла (не обфусцированное)</span>\n  <span class=\"token keyword\">const</span> fileContents <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Используя shift-ast библиотеку парсим скрипт и строим ast</span>\n  <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token function\">parseScript</span><span class=\"token punctuation\">(</span>fileContents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Инициализируем сессию рефакторинга, используемая, например, для запроса узлов дерева</span>\n  <span class=\"token keyword\">const</span> refactor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RefactorSession</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Приведённые ниже 5 операторов извлекают различные строки, числа и свойства объектов</span>\n  <span class=\"token comment\">// которые мы хотим обфусцировать</span>\n  <span class=\"token comment\">// refactor.query позволяет запрашивать определённые узлы AST используя синтаксис, похожий на CSS</span>\n  <span class=\"token comment\">// Таким образом, например refactor.query('LiteralStringExpression') вернёт все LiteralStringExpression</span>\n  <span class=\"token comment\">// в программе.</span>\n  <span class=\"token keyword\">const</span> stringsProgram <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>refactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LiteralStringExpression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> numbersProgram <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>refactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LiteralNumericExpression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> bindingProperties <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>\n      refactor\n        <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AssignmentExpression[binding.type=\"StaticMemberAssignmentTarget\"]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>binding<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> expStatementStr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>\n      refactor\n        <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ExpressionStatement[expression.expression.type=\"StaticMemberExpression\"]'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> exp<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> staticMemberStr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>refactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StaticMemberExpression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> staticLiterals <span class=\"token operator\">=</span> stringsProgram<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>\n    numbersProgram<span class=\"token punctuation\">,</span>\n    bindingProperties<span class=\"token punctuation\">,</span>\n    expStatementStr<span class=\"token punctuation\">,</span>\n    staticMemberStr<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// staticLiterals - содержит атрибуты, которые мы хотим обфусцировать</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"AsyncFunction\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"adblock\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&amp;nbsp;\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"adsbox\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"rgb(255,255,0)\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"timezone\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token string\">\"screenX\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"pageXOffset\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"pageYOffset\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"clientWidth\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> staticLiteralToIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>staticLiterals<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lit<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>lit<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>После, мы изменяем AST первоначальной программы, записывая <strong>staticLiterals</strong> массив в её начало. Вместо того, чтобы хранить сырые значения элементов масиива, мы закодируем их с помощью base64.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">refactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>VariableDeclarationStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    declaration<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>VariableDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      kind<span class=\"token operator\">:</span> <span class=\"token string\">\"const\"</span><span class=\"token punctuation\">,</span>\n      declarators<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>VariableDeclarator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          binding<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>BindingIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">\"members\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          init<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>ArrayExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            elements<span class=\"token operator\">:</span> staticLiterals<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> lit <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>LiteralStringExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  value<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer<span class=\"token punctuation\">.</span>from</span><span class=\"token punctuation\">(</span>lit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> lit <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>LiteralNumericExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  value<span class=\"token operator\">:</span> lit<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Мы так же вставим функции вызывающие <strong>indexToLiteral</strong> в AST нашего скрипта. Её задача, используя индекс в массиве и массив, вернуть элемент по данному индексу. <abbr title=\"Since\">Поскольку</abbr> мы закодировали строки в нашем массиве используя base64, нужно преобразовать их обратно используя функцию <strong>atob</strong>. Хотя это <abbr title=\"not really improve the resilience \">не очень сложная обфускация</abbr>, я просто показал это как пример и теперь вы можете реализовать более сложные преобразования <abbr title=\"on your own\">самостоятельно</abbr>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> indexToStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    function indexToLiteral(index, arr) {\n        if (typeof arr[index] ==='string') return atob(arr[index]);\n            return arr[index];\n    }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Вместо создания функции с использованием класса Shift, как мы</span>\n<span class=\"token comment\">// сделали для предыдущего фрагмента кода, здесь мы определяем функцию как строку</span>\n<span class=\"token comment\">// и после преобразует так же в AST и встраивает в AST, которое мы преобразуем</span>\n<span class=\"token keyword\">const</span> indexToStrAst <span class=\"token operator\">=</span> <span class=\"token function\">parseScript</span><span class=\"token punctuation\">(</span>indexToStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nrefactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>indexToStrAst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Наконец, мы применяем различные преобразования кода:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Короткая функция, помогающая нам легче создавать выражения вызовов</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildIndexToLitCallExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>CallExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    callee<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>IdentifierExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"indexToLiteral\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>LiteralNumericExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> index<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>IdentifierExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"members\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Преобразование строк и чисел, используемых в аргументах функций</span>\nrefactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callExpression</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  callExpression<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">argument<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      argument<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"LiteralStringExpression\"</span> <span class=\"token operator\">||</span>\n      argument<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"LiteralNumericExpression\"</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      callExpression<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">buildIndexToLitCallExpression</span><span class=\"token punctuation\">(</span>\n        staticLiteralToIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Присвоения вида myobj.prop = val; => myobj[func(idx, arr)] = val;</span>\nrefactor\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AssignmentExpression[binding.type=\"StaticMemberAssignmentTarget\"]'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">assignmentExpression</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    assignmentExpression<span class=\"token punctuation\">.</span>binding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>ComputedMemberAssignmentTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      object<span class=\"token operator\">:</span> assignmentExpression<span class=\"token punctuation\">.</span>binding<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">,</span>\n      expression<span class=\"token operator\">:</span> <span class=\"token function\">buildIndexToLitCallExpression</span><span class=\"token punctuation\">(</span>\n        staticLiteralToIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>assignmentExpression<span class=\"token punctuation\">.</span>binding<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Строки и числа в оператораях-выражениях</span>\nrefactor\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">':matches(ExpressionStatement[expression.expression.type=\"LiteralStringExpression\"], '</span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">'ExpressionStatement[expression.expression.type=\"LiteralNumericExpression\"])'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    exp<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> <span class=\"token function\">buildIndexToLitCallExpression</span><span class=\"token punctuation\">(</span>\n      staticLiteralToIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Строки и числа в объявлении переменных</span>\nrefactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VariableDeclarationStatement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  exp<span class=\"token punctuation\">.</span>declaration<span class=\"token punctuation\">.</span>declarators<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">declarator</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      declarator<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"LiteralNumericExpression\"</span> <span class=\"token operator\">||</span>\n      declarator<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"LiteralStringExpression\"</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      declarator<span class=\"token punctuation\">.</span>init <span class=\"token operator\">=</span> <span class=\"token function\">buildIndexToLitCallExpression</span><span class=\"token punctuation\">(</span>\n        staticLiteralToIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>declarator<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Сделать доступ к полям и методам объекта динамическим</span>\nrefactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StaticMemberExpression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  exp<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"ComputedMemberExpression\"</span><span class=\"token punctuation\">;</span>\n  exp<span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> <span class=\"token function\">buildIndexToLitCallExpression</span><span class=\"token punctuation\">(</span>staticLiteralToIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> exp<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Генерируем код на из получившегося AST дерева и сохраняем его в файл</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> refactor<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Добавлене нашего обфускатора в Gulp</h2>\n<p>Для полной автоматизации обфускаии, создадим новую задачу в <strong>gulpfile.js</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gulpfile.js</span>\n<span class=\"token keyword\">const</span> obfuscator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/obfuscator.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">obfuscateFPScript</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obfuscator<span class=\"token punctuation\">.</span><span class=\"token function\">obfuscate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./dist/simpleFingerprintCollector.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./dist/obfuscated.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>obfuscate <span class=\"token operator\">=</span> obfuscateFPScript<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Таким образом, для запуска обфускации мы можем выполнить команду <code class=\"language-text\">gulp obfuscate</code>, которая создаст файл с именем <strong>obfuscated.js</strong> в директории <strong>dist/</strong>.</p>\n<h2>Изменение имени переменных</h2>\n<p>На это этапе наш обфускатор все ещё содержит некоторые переменные с <abbr title=\"meaningful\">осмысленными</abbr> именами.\nВместо переименования переменных самостоятельно, я покажу как мы можем использовать <strong>gulp-terser</strong> для переименования переменных и таким образом уменьшить кол-во информации, доступное для злоумышленника.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> terser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gulp-terser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rename <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gulp-rename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Создадим новую задачу</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Как входные параметры, передадим обфусцируемый скрипт</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dist/obfuscated.js\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">terser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          booleans<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          drop_console<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          evaluate<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          keep_classnames<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        mangle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          toplevel<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          reserved<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"fingerprintCollector\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"collect\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// мы не должны переименовывать переменные fingerprintCollector, collect</span>\n          <span class=\"token comment\">// так как это нужно для получения доступа из других скриптов, которым нужно знать их имя</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        keep_fnames<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          beautify<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          preamble<span class=\"token operator\">:</span> <span class=\"token string\">\"/* You superb copyright here */\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Вы так же можете добавить сообщение или копирайты в заголовок</span>\n          <span class=\"token comment\">// вашего скрипта</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extname<span class=\"token operator\">:</span> <span class=\"token string\">\".min.js\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dist/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// это создаст новый файл **dist/obfuscated.min.js**</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>compress <span class=\"token operator\">=</span> compress<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Мы определяем новую gulp задачу с именем build</span>\n<span class=\"token comment\">// Эта задача вызывает последовательно 3 другие задачи, определённые выше в посте</span>\nexports<span class=\"token punctuation\">.</span>build <span class=\"token operator\">=</span> <span class=\"token function\">series</span><span class=\"token punctuation\">(</span>concatScripts<span class=\"token punctuation\">,</span> obfuscateFPScript<span class=\"token punctuation\">,</span> compress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Тестирование нашего обфусцированного кода</h2>\n<p>При создании собственного обфускатора или при применении преобразования к коду можно создать код, который выглядит рабочим, но работает не так как ожидалось. Таким образом важно иметь тесты для автоматической проверки, работает ли преобразованный код как оригинальный. Для тестирования нашего кода мы используем библиотеки <em>Chai</em> и <em>Puppeteer</em>. Puppeteer позволяет легко автоматизировать проверку работы в браузере.</p>\n<p>В <strong>test/</strong> директории мы создадим простой HTML файл, который включает наш обфусцируемый код.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../dist/obfuscated.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Затем создаем тестовый файл <strong>test.js</strong>. Он включает различные unit тесты, которые проверяют, работают ли наш код как ожидалось.\nВ нашем примере я создам только 3 простых теста для демонстрации, как это работает.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> expect <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> puppeteer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"puppeteer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fingerprinting on Chrome Headless\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> browser<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> fingerprint<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Код выполняемый до начала работы тестов</span>\n\n    <span class=\"token comment\">// мы создаем экземпляр puppeteer</span>\n    <span class=\"token comment\">// он позволяет управлять Chrome headless</span>\n    browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// мы загружаем HTML страницу, которая находится в этой же директории</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">goto</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      waitUntil<span class=\"token operator\">:</span> <span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Выполняем код в контексте нашей HTML страницы, чтобы получить результат работы fingerprint скрипта</span>\n    fingerprint <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fingerprint <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fingerprintCollector<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> fingerprint<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Когда все тесты выполнены, мы закрываем страницу и браузер</span>\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Создадим 3 unit теста</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resOverflow should be an object\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> fingerprint<span class=\"token punctuation\">.</span>resOverflow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"screen should have 16 properties\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isScreenValid <span class=\"token operator\">=</span>\n      fingerprint<span class=\"token punctuation\">.</span>screenResolution <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fingerprint<span class=\"token punctuation\">.</span>screenResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>isScreenValid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"adblock should be false\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fingerprint<span class=\"token punctuation\">.</span>adblock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Таким образом сейчас у нас есть обфусцированный fingerprinting скрипт, который должен работать <abbr title=\"properly\">правильно</abbr> в браузере. Вы можете найти <a href=\"https://github.com/antoinevastel/simpleJSObfuscator\">полный код на GitHub</a>. <abbr title=\"snippet\">Фрагмент</abbr> внизу показывает пример обфусцированного кода для функции, отвечающий за сбор данных с canvas.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">Z</span> <span class=\"token operator\">=</span> document<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">69</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">76</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">52</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">37</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">39</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">43</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Z</span><span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">86</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">[</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Хотя это выглядит полностью не читаемым, этот тип обфускаторов может быть легко reverse engineered. Чтобы узнать больше об этом, можете посмотреть <a href=\"https://www.youtube.com/channel/UCJbZGfomrHtwpdjrARoMVaA/videos\">Jarrod Overson’s Youtube канал</a>.</p>\n<p>В <a href=\"https://antoinevastel.com/javascript/2019/09/09/improving-obfuscator.html\">следующей части</a>, я добавил больше трансформаций в наш обфускатор.</p>\n<p>Оригинал: <a href=\"https://antoinevastel.com/javascript/2019/09/04/home-made-obfuscator.html\">A simple homemade JavaScript obfuscator</a></p>\n<hr>\n<p>consists - заключается<br>\nas well as - так же как<br>\neither - тоже, любой<br>\nstatements - оператор, заявление<br>\nenables - позволяет<br>\nThus, … - таким образом<br>\ngiven - данный, данность<br>\nresilience - устойчивость, упругость<br>\non your own - самостоятельно<br>\nAssignments - Присвоения<br>\nmeaningful - осмысленно<br>\nsequentially - последовательно<br>\ninstance - экземпляр<br>\nobtain - получать, добывать<br>\nOnce - однажды, когда\nproperly - должным образом, правильно</p>","fields":{"readingTime":{"minutes":13.455}},"frontmatter":{"title":"Простой самодельный обфускатор JavaScript ","date":"25 сентября 2019","img":{"childImageSharp":{"fluid":{"src":"/static/d34ff74fe9c3d6f45e3affaa869ab7af/54845/preview.jpg"}}}}}},"pageContext":{"slug":"/home-made-obfuscator/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Привет мир!"}},"next":{"fields":{"slug":"/improving-obfuscator/"},"frontmatter":{"title":"Улучшение JavaScript обфускатора"}}}},"staticQueryHashes":["63159454"]}