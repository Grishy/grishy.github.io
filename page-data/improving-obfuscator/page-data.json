{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/improving-obfuscator/","result":{"data":{"site":{"siteMetadata":{"title":"Grishy","author":"Sergey Grishin"}},"markdownRemark":{"id":"2bdfee44-7b66-511e-bbe1-6d05c3214ab4","html":"<p>В <a href=\"/home-made-obfuscator/\">прошлом посте</a> мы создали простой JavaScript обфускатор и применили его к fingerprinting скрипту, который может использоваться для обнаружения ботов или улучшения аутентификации. В этом посте мы расширим его, добавив новые трансформации, которые нацелены на уменьшение читаемости кода.</p>\n<p>Ещё раз, данный обфускатор не годится для использования в продакшене и подходит только для образовательных целей. Если вы ищете хороший обфускатор, взгляните на <a href=\"https://obfuscator.io/\">obfuscator.io (open source)</a> или <a href=\"https://jscrambler.com/\">JSCrambler</a>.<br>\nПеред тем, как я представлю код, кратко рассмотрим код из прошлого поста.</p>\n<h2>Текущие преобразования кода</h2>\n<p>Наш обфускатор заменяет статический доступ к полям объекта (методы и атрибуты) на динамические вызовы функций.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">errorMessage <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// станет</span>\nerrorMessage <span class=\"token operator\">=</span> e<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Так же он заменит статические строки и числа на вызовы функций.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">context<span class=\"token punctuation\">.</span>textBaseline <span class=\"token operator\">=</span> <span class=\"token string\">\"alphabetic\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// станет</span>\ncontext<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexOther<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Для этого, мы храним все статические строки, числа и статические члены объекта, к которым осуществляется доступ в коде, в один массив.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// staticLiterals хранит различные атрибуты, которые мы хотим обфусцировать</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"AsyncFunction\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"adblock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token string\">\"pageYOffset\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clientWidth\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Чтобы сделать его менее читаемым, мы закодируем строки в этом массиве используя base64. Затем, когда мы хотим получить доступ к элементу массива в нашем коде, мы используем функцию <strong>f</strong> из прошлого примера, которая сопоставляет индекс и нужный элемент массива.</p>\n<h2>Новые преобразования</h2>\n<p>Сейчас, когда мы вспомнили старые преобразования из первой части нашего обфускатора, посмотрим на новые. Будем надеяться, что они сделают обфусцированный код более сложным для понимания.</p>\n<h3>Разделение строковых литералов и статических выражений членов</h3>\n<p>В первой версии обфускатора, строковые литералы и статические члены выражений хранились в массиве, закодированные base64. Таким образом, <strong>toDataURL</strong> хранился как <strong>dG9EYXRhVVJM</strong> (<code class=\"language-text\">atob(&#39;dG9EYXRhVVJM&#39;) = &#39;toDataURL&#39;</code>). В новой версии, вместо сохранения base64 закодированного <strong>toDataURL</strong>, мы разделим строки на несколько частей. Так, в зависимости на сколько частей мы разобьем, можно хранить такие подстроки <code class=\"language-text\">t</code>, <code class=\"language-text\">dat</code>, <code class=\"language-text\">aU</code> and <code class=\"language-text\">RL</code> и после этого уже сохраним каждую из этих подстрок, используя base64.</p>\n<p>Используем следующий код для получения всех литералов для обфускайии и разбиения их на подстроки.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> staticLiterals <span class=\"token operator\">=</span> stringsProgram<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>\n  numbersProgram<span class=\"token punctuation\">,</span>\n  bindingProperties<span class=\"token punctuation\">,</span>\n  expStatementStr<span class=\"token punctuation\">,</span>\n  staticMemberStr<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Код довольно похож на старый</span>\n<span class=\"token comment\">// staticLiteral содержит все строки/числа, который мы хотим обфусцировать</span>\n\n<span class=\"token comment\">// Учитывая строку для разделения и максимальное количество разделений,</span>\n<span class=\"token comment\">// возвращает массив подстрок, случайно разделённых</span>\n<span class=\"token comment\">// splitStringLiteral(\"1234567890\", 5);</span>\n<span class=\"token comment\">// [\"1\", \"23\", \"456\", \"7890\"]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">splitStringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lit<span class=\"token punctuation\">,</span> maxNumSplits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  maxNumSplits <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>maxNumSplits<span class=\"token punctuation\">,</span> lit<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> numSplits <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>maxNumSplits <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> splits <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>splits<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;</span> numSplits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    splits<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>lit<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> orderedSplits <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>splits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  orderedSplits<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> literalChunks <span class=\"token operator\">=</span> orderedSplits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> lit<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> orderedSplits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> lit<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>orderedSplits<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> lit<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>orderedSplits<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numSplits <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    literalChunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>lit<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>orderedSplits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> literalChunks<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> subLiterals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Для экономии места мы сохраняем каждую подстроку только один раз</span>\n<span class=\"token comment\">// Мы строим отображение литералов, например 'toDataURL'</span>\n<span class=\"token comment\">// на все её подстроки, ['t', 'oDataU', 'RL']</span>\n<span class=\"token keyword\">const</span> staticLiteralToChunks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n  staticLiterals<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> subLit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> lit <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      subLit <span class=\"token operator\">=</span> <span class=\"token function\">splitStringLiteral</span><span class=\"token punctuation\">(</span>lit<span class=\"token punctuation\">,</span> transformationsConfig<span class=\"token punctuation\">.</span>maxSplits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      subLit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>lit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    subLit<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subLiterals<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>lit<span class=\"token punctuation\">,</span> subLit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// мы не разбиваем числа, пока...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Создаем массив, содержащий все подстроки</span>\n<span class=\"token keyword\">const</span> subLitArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>subLiterals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subLiteralToIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>subLitArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> staticLiteralToIndexChunks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Мы создаем map, которая связывает литерал с индексами всех</span>\n<span class=\"token comment\">// его подстроки в массиве subLitArr</span>\nstaticLiteralToChunks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> indexChunks <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subLit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subLiteralToIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>subLit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  staticLiteralToIndexChunks<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> indexChunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Таким образом, доступ к свойству, например <code class=\"language-text\">myobj.property = &#39;myval&#39;</code> будет иметь следующую форму в зависимости от количества разбиений: <code class=\"language-text\">myobj[f(index1, arr) + ... + f(indexN, arr)] = f(indexX, arr) + ... + f(indexZ, arr);</code></p>\n<h3>Меняем алфавит в base64</h3>\n<p>Наш второй преобразователь нацелен на изменение алфавита, используемого в кодировании литерал (чисел и строк). В прошлой версии, мы использовали base64 со стандартным алфавитом.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Код из первой версии закодирует 'lit' в base64</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer<span class=\"token punctuation\">.</span>from</span><span class=\"token punctuation\">(</span>lit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Стандартно используется следующий алфавит</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Вместо использования стандартного алфавита, мы используем его переменную версию. Таким образом, вместо использования <code class=\"language-text\">new Buffer.from(lit).toString(&#39;base64&#39;)</code> для закодирования литерала, мы будем использовать следующую base64 функцию, которая будет так же принимать и алфавит, как параметр <strong>keyStr</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">encode64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> keyStr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/// ...</span>\n    \n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        chr1 <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        chr2 <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">///...</span>\n        \n        output <span class=\"token operator\">=</span> output <span class=\"token operator\">+</span> keyStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>enc1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> keyStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>enc2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n            keyStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>enc3<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> keyStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>enc4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Затем, мы закодируем массив подстрок, который сделали на прошлом шаге и добавим результат в AST скрипта.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">refactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>VariableDeclarationStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    declaration<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>VariableDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      kind<span class=\"token operator\">:</span> <span class=\"token string\">\"const\"</span><span class=\"token punctuation\">,</span>\n      declarators<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>VariableDeclarator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          binding<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>BindingIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">\"members\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          init<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>ArrayExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            elements<span class=\"token operator\">:</span> subLitArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> lit <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>LiteralStringExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  value<span class=\"token operator\">:</span> <span class=\"token function\">encode64</span><span class=\"token punctuation\">(</span>lit<span class=\"token punctuation\">,</span> alphabet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> lit <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shift<span class=\"token punctuation\">.</span>LiteralNumericExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  value<span class=\"token operator\">:</span> lit<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Так как мы используем не стандартный алфавит для кодирования литерал, нужно где то его хранить.<br>\nМы создаем переменную со случайным именем, которая будет содержать алфавит, используемый для декодирования, и добавляем их в скрипт.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Мы генерируем случайное имя переменной</span>\n<span class=\"token keyword\">const</span> alphabetPropertyName <span class=\"token operator\">=</span> <span class=\"token function\">generateRandomString</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Генерируем случайный алфавит</span>\n<span class=\"token keyword\">const</span> alphabet <span class=\"token operator\">=</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Добавляем переменные в скрипт</span>\n<span class=\"token keyword\">const</span> alphabetElement <span class=\"token operator\">=</span> <span class=\"token function\">parseScript</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">window['</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>alphabetPropertyName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'] = '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>alphabet<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nrefactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>alphabetElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Поскольку мы не хотим, чтобы это переменная была обфусцированна, выполним этот код после обфускации.</p>\n<p>В прошлой версии мы использовали встроенную функцию <strong>atob</strong> для декодирования строк, которые были обфусцированы base64. Тем не менее, <strong>atob</strong> не может использовать другие алфавиты. Поэтому мы добавили нашу собственную функцию декодирования, с использованием нашего алфавита.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodeBody <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function decode64(input, keyStr) {\n    ...\n    // Удалить все символы, которые не A-Z, a-z, 0-9, +, /, or =\n    input = input.replace(/[^A-Za-z0-9\\\\+\\\\/\\\\=]/g, \"\");\n    do {\n        enc1 = keyStr.indexOf(input.charAt(i++));\n        enc2 = keyStr.indexOf(input.charAt(i++));\n        enc3 = keyStr.indexOf(input.charAt(i++));\n        enc4 = keyStr.indexOf(input.charAt(i++));\n        ...\n    } while (i &lt; input.length);\n    return output;\n}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Добавляем в наш скрипт</span>\n<span class=\"token keyword\">const</span> decodeBodyAst <span class=\"token operator\">=</span> <span class=\"token function\">parseScript</span><span class=\"token punctuation\">(</span>decodeBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nrefactor<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>statements<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>decodeBodyAst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Переключение с base64 со стандартным алфавитом, на base64 со случайным алфавитом не слишком сильно улучшает безопасность. Тем не менее, это может помочь против неопытных пользователей. Если попытаться раскодировать литералы с помощью <strong>atob</strong>, без использования алфавита, то это не будет работать.</p>\n<h3>Добавление тернарных операций</h3>\n<p>Третьим и последним преобразованием мы добавим тернарные операции, сделав код менее читаемым. В прошлой версии, мы заменяли все литералы и статические поля следующий образом.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">myobj<span class=\"token punctuation\">.</span>property <span class=\"token operator\">=</span> <span class=\"token string\">\"myval\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// станет</span>\nmyobj<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>otherIndex<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>После применения первого преобразования их этой статьи, вывод станет более сложным:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">myobj<span class=\"token punctuation\">.</span>property <span class=\"token operator\">=</span> <span class=\"token string\">'myval'</span>\n<span class=\"token comment\">// станет</span>\nmyobj<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index1<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index2<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">...</span> <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexN<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexX<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">...</span> <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexZ<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Тем не менее, всякий раз мы преобразуем одним и тем же методом. Чтобы сделать обратное преобразование более сложным, будем использовать несколько подходов для преобразования. В новой версии я предлагаю использовать тернарный оператор, т.е. оператор, которые имеет следующую структуру.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mycondition <span class=\"token operator\">?</span> expressionWhenTrue <span class=\"token operator\">:</span> expressionWhenFalse<span class=\"token punctuation\">;</span></code></pre></div>\n<p>В новой версии <code class=\"language-text\">myobj.property = &#39;myval&#39;</code> будет переведено в это:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">myobj<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index1<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">alwaysTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>index2<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'randomValue'</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token operator\">...</span> <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexN<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>alwaysFalse <span class=\"token operator\">?</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>randomIndex<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexX<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">...</span> <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>indexZ<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Оригинал: <a href=\"https://antoinevastel.com/javascript/2019/09/09/improving-obfuscator.html\">Improving our homemade JavaScript obfuscator</a></p>\n<hr>\n<p>enhance - увеличение<br>\nserves - удовлетворять, подходить<br>\nbriefly - кратко<br>\nwould become - станет<br>\nreminded - напомнил<br>\npermutation - перестановка<br>\ncontrary - вопреки, против<br>\nguarantees - гарантии</p>","fields":{"readingTime":{"minutes":6.165}},"frontmatter":{"title":"Улучшение JavaScript обфускатора","date":"23 ноября 2019","img":{"childImageSharp":{"fluid":{"src":"/static/9a89ed17061a88596564000303d9205f/54845/preview.jpg"}}}}}},"pageContext":{"slug":"/improving-obfuscator/","previous":{"fields":{"slug":"/home-made-obfuscator/"},"frontmatter":{"title":"Простой самодельный обфускатор JavaScript "}},"next":{"fields":{"slug":"/2021/how-to-structure-a-golang-cli-project/"},"frontmatter":{"title":"Как структурировать Go CLI проект"}}}},"staticQueryHashes":["63159454"]}